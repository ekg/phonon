use phonon::mini_notation_v3::parse_mini_notation;
use phonon::pattern::{Fraction, Pattern, State, TimeSpan};
/// Comprehensive system coherence tests to verify end-to-end functionality
/// across all major subsystems and their interactions
use phonon::unified_graph::{Signal, SignalNode, UnifiedSignalGraph, Waveform};
use std::collections::HashMap;

/// Test Matrix:
/// 1. Pattern System ✓
/// 2. Audio Synthesis ✓
/// 3. Signal Routing ✓
/// 4. Modulation ✓
/// 5. Cross-domain Integration ✓

#[test]
fn test_complete_signal_flow_patterns_to_audio() {
    println!("\n=== COHERENCE TEST: Complete Signal Flow (Patterns → Audio) ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);
    graph.set_cps(2.0);

    // 1. Pattern Layer
    let rhythm_pattern = parse_mini_notation("bd ~ sn ~");
    let rhythm = graph.add_node(SignalNode::Pattern {
        pattern_str: "bd ~ sn ~".to_string(),
        pattern: rhythm_pattern,
        last_value: 0.0,
        last_trigger_time: -1.0,
    });

    // 2. Synthesis Layer
    let kick_osc = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(60.0),
        waveform: Waveform::Sine,
        phase: 0.0,
    });

    let snare_noise = graph.add_node(SignalNode::Noise { seed: 12345 });
    let snare_filtered = graph.add_node(SignalNode::HighPass {
        input: Signal::Node(snare_noise),
        cutoff: Signal::Value(2000.0),
        q: Signal::Value(2.0),
        state: Default::default(),
    });

    // 3. Envelope Layer (triggered by pattern)
    let env = graph.add_node(SignalNode::Envelope {
        input: Signal::Node(kick_osc),
        trigger: Signal::Node(rhythm),
        attack: 0.001,
        decay: 0.1,
        sustain: 0.0,
        release: 0.05,
        state: Default::default(),
    });

    // 4. Mix Layer
    let mixed = graph.add_node(SignalNode::Add {
        a: Signal::Node(env),
        b: Signal::Node(snare_filtered),
    });

    // 5. Output
    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(mixed),
    });

    graph.set_output(output);

    // Verify complete chain produces output
    let buffer = graph.render(44100);

    assert!(
        buffer.iter().any(|&s| s != 0.0),
        "Complete chain should produce output"
    );

    // Verify we have transients (drum hits)
    let mut transients = 0;
    let mut prev = 0.0;
    for &sample in &buffer {
        if sample.abs() > prev * 1.5 + 0.01 {
            transients += 1;
        }
        prev = sample.abs() * 0.999; // decay
    }

    assert!(transients > 2, "Should detect multiple drum hits");
    println!(
        "✓ Complete signal flow works: {} transients detected",
        transients
    );
}

#[test]
fn test_bidirectional_modulation() {
    println!("\n=== COHERENCE TEST: Bidirectional Modulation ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);

    // Audio → Pattern: Audio analysis controls pattern evaluation
    let audio_osc = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(5.0), // 5Hz LFO
        waveform: Waveform::Sine,
        phase: 0.0,
    });

    let rms = graph.add_node(SignalNode::RMS {
        input: Signal::Node(audio_osc),
        window_size: 0.01,
        buffer: vec![0.0; 441],
        write_idx: 0,
    });

    // Pattern → Audio: Pattern controls synthesis
    let freq_pattern = parse_mini_notation("220 330 440 550");
    let freq_node = graph.add_node(SignalNode::Pattern {
        pattern_str: "220 330 440 550".to_string(),
        pattern: freq_pattern,
        last_value: 220.0,
        last_trigger_time: -1.0,
    });

    // Cross-modulation: RMS modulates frequency, pattern drives oscillator
    let modulated_freq = graph.add_node(SignalNode::Add {
        a: Signal::Node(freq_node),
        b: Signal::Node(rms),
    });

    let synth = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Node(modulated_freq),
        waveform: Waveform::Saw,
        phase: 0.0,
    });

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(synth),
    });

    graph.set_output(output);
    graph.set_cps(4.0);

    let buffer = graph.render(22050);
    assert!(
        buffer.iter().any(|&s| s != 0.0),
        "Bidirectional modulation should work"
    );

    println!("✓ Bidirectional modulation verified");
}

#[test]
fn test_feedback_loop_stability() {
    println!("\n=== COHERENCE TEST: Feedback Loop Stability ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);

    // Create a feedback loop with delay to ensure stability
    let source = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(440.0),
        waveform: Waveform::Sine,
        phase: 0.0,
    });

    // Delay prevents infinite feedback
    let delayed = graph.add_node(SignalNode::Delay {
        input: Signal::Node(source),
        time: Signal::Value(0.1),
        feedback: Signal::Value(0.7), // High but stable feedback
        mix: Signal::Value(0.5),
        buffer: vec![0.0; 8820], // 200ms buffer
        write_idx: 0,
    });

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(delayed),
    });

    graph.set_output(output);

    let buffer = graph.render(44100);

    // Check that output doesn't blow up
    let max_val = buffer.iter().map(|s| s.abs()).fold(0.0f32, f32::max);
    assert!(max_val < 2.0, "Feedback should remain stable");
    assert!(max_val > 0.0, "Should produce output");

    // Check for echo pattern
    let quarter = buffer.len() / 4;
    let first_quarter_avg =
        buffer[0..quarter].iter().map(|s| s.abs()).sum::<f32>() / quarter as f32;
    let last_quarter_avg =
        buffer[3 * quarter..].iter().map(|s| s.abs()).sum::<f32>() / quarter as f32;

    assert!(
        last_quarter_avg > first_quarter_avg * 0.5,
        "Should have sustained echoes"
    );

    println!(
        "✓ Feedback loops are stable with max amplitude {:.3}",
        max_val
    );
}

#[test]
fn test_complex_routing_topology() {
    println!("\n=== COHERENCE TEST: Complex Routing Topology ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);

    // Create a complex routing:
    // Two oscillators → filters → cross-modulation → mix

    let osc1 = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(220.0),
        waveform: Waveform::Saw,
        phase: 0.0,
    });

    let osc2 = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(330.0),
        waveform: Waveform::Square,
        phase: 0.0,
    });

    // Filters with cross-modulated cutoffs
    let lpf1 = graph.add_node(SignalNode::LowPass {
        input: Signal::Node(osc1),
        cutoff: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Add(
            Signal::Value(1000.0),
            Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
                Signal::Node(osc2),
                Signal::Value(500.0),
            ))),
        ))),
        q: Signal::Value(2.0),
        state: Default::default(),
    });

    let hpf2 = graph.add_node(SignalNode::HighPass {
        input: Signal::Node(osc2),
        cutoff: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Add(
            Signal::Value(500.0),
            Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
                Signal::Node(osc1),
                Signal::Value(200.0),
            ))),
        ))),
        q: Signal::Value(1.5),
        state: Default::default(),
    });

    // Mix with different weights
    let mixed = graph.add_node(SignalNode::Add {
        a: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Node(lpf1),
            Signal::Value(0.6),
        ))),
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Node(hpf2),
            Signal::Value(0.4),
        ))),
    });

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(mixed),
    });

    graph.set_output(output);

    let buffer = graph.render(4410);

    assert!(
        buffer.iter().any(|&s| s != 0.0),
        "Complex routing should produce output"
    );

    // Verify complex modulation creates variation
    let variance = buffer.iter().map(|&s| s * s).sum::<f32>() / buffer.len() as f32;

    assert!(variance > 0.01, "Complex routing should create rich output");

    println!(
        "✓ Complex routing topology works with variance {:.4}",
        variance
    );
}

#[test]
fn test_pattern_algebra_in_synthesis() {
    println!("\n=== COHERENCE TEST: Pattern Algebra in Synthesis ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);
    graph.set_cps(4.0);

    // Pattern operations affect synthesis
    let base_pattern = parse_mini_notation("60 62 64 65"); // MIDI notes
    let pattern_node = graph.add_node(SignalNode::Pattern {
        pattern_str: "60 62 64 65".to_string(),
        pattern: base_pattern,
        last_value: 60.0,
        last_trigger_time: -1.0,
    });

    // Convert MIDI to frequency (simplified)
    let freq = graph.add_node(SignalNode::Multiply {
        a: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Scale {
            input: Signal::Node(pattern_node),
            min: 220.0,
            max: 880.0,
        })),
        b: Signal::Value(1.0),
    });

    let melody = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Node(freq),
        waveform: Waveform::Triangle,
        phase: 0.0,
    });

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(melody),
    });

    graph.set_output(output);

    let buffer = graph.render(44100);

    // Verify pattern creates pitch changes
    let chunks = 4;
    let chunk_size = buffer.len() / chunks;
    let mut frequencies = Vec::new();

    for i in 0..chunks {
        let chunk = &buffer[i * chunk_size..(i + 1) * chunk_size];
        // Simple zero-crossing frequency detection
        let mut crossings = 0;
        let mut prev_sign = chunk[0] > 0.0;

        for &sample in chunk.iter().skip(1) {
            let sign = sample > 0.0;
            if sign != prev_sign {
                crossings += 1;
                prev_sign = sign;
            }
        }

        frequencies.push(crossings);
    }

    // Should have different frequencies
    let unique_freqs = frequencies
        .iter()
        .collect::<std::collections::HashSet<_>>()
        .len();
    assert!(unique_freqs > 1, "Pattern should create different pitches");

    println!(
        "✓ Pattern algebra drives synthesis with {} unique frequencies",
        unique_freqs
    );
}

#[test]
fn test_realtime_parameter_modulation() {
    println!("\n=== COHERENCE TEST: Real-time Parameter Modulation ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);

    // Multiple LFOs at different rates modulating different parameters
    let lfo_slow = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(0.5),
        waveform: Waveform::Sine,
        phase: 0.0,
    });

    let lfo_fast = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(7.0),
        waveform: Waveform::Triangle,
        phase: 0.0,
    });

    // Main oscillator with modulated frequency
    let carrier_freq = graph.add_node(SignalNode::Add {
        a: Signal::Value(440.0),
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Node(lfo_fast),
            Signal::Value(50.0),
        ))),
    });

    let carrier = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Node(carrier_freq),
        waveform: Waveform::Saw,
        phase: 0.0,
    });

    // Filter with modulated cutoff - more dramatic sweep
    let cutoff = graph.add_node(SignalNode::Add {
        a: Signal::Value(800.0), // Lower center frequency
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Node(lfo_slow),
            Signal::Value(700.0), // Sweep from 100 to 1500 Hz
        ))),
    });

    let filtered = graph.add_node(SignalNode::LowPass {
        input: Signal::Node(carrier),
        cutoff: Signal::Node(cutoff),
        q: Signal::Value(5.0), // Higher resonance for more effect
        state: Default::default(),
    });

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(filtered),
    });

    graph.set_output(output);

    let buffer = graph.render(44100);

    // Analyze modulation depth
    let window = 4410; // 100ms windows
    let mut window_powers = Vec::new();

    for i in 0..10 {
        let start = i * window;
        let end = ((i + 1) * window).min(buffer.len());
        let power: f32 =
            buffer[start..end].iter().map(|s| s * s).sum::<f32>() / (end - start) as f32;
        window_powers.push(power);
    }

    // Should have variation from slow LFO on filter
    let max_power = window_powers.iter().cloned().fold(0.0f32, f32::max);
    let min_power = window_powers.iter().cloned().fold(1.0f32, f32::min);

    assert!(
        max_power > min_power * 1.5,
        "Should have amplitude modulation from filter sweep"
    );

    println!(
        "✓ Real-time modulation verified with {:.1}x power variation",
        max_power / min_power.max(0.001)
    );
}

#[test]
fn test_bus_system_coherence() {
    println!("\n=== COHERENCE TEST: Bus System Coherence ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);

    // Create multiple buses that reference each other
    let lfo = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(2.0),
        waveform: Waveform::Sine,
        phase: 0.0,
    });
    graph.add_bus("lfo".to_string(), lfo);

    let carrier = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Add(
            Signal::Value(440.0),
            Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
                Signal::Bus("lfo".to_string()),
                Signal::Value(100.0),
            ))),
        ))),
        waveform: Waveform::Saw,
        phase: 0.0,
    });
    graph.add_bus("carrier".to_string(), carrier);

    let filter = graph.add_node(SignalNode::LowPass {
        input: Signal::Bus("carrier".to_string()),
        cutoff: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Add(
            Signal::Value(1000.0),
            Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
                Signal::Bus("lfo".to_string()),
                Signal::Value(500.0),
            ))),
        ))),
        q: Signal::Value(2.0),
        state: Default::default(),
    });
    graph.add_bus("filter".to_string(), filter);

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Bus("filter".to_string()),
    });

    graph.set_output(output);

    let buffer = graph.render(22050);

    assert!(buffer.iter().any(|&s| s != 0.0), "Bus system should work");

    // Verify modulation is happening
    let first_half_avg = buffer[0..11025].iter().map(|s| s.abs()).sum::<f32>() / 11025.0;
    let second_half_avg = buffer[11025..].iter().map(|s| s.abs()).sum::<f32>() / 11025.0;

    assert!(
        (first_half_avg - second_half_avg).abs() > 0.01,
        "LFO should create variation"
    );

    println!("✓ Bus system coherence verified");
}

#[test]
fn test_analysis_driven_synthesis() {
    println!("\n=== COHERENCE TEST: Analysis-Driven Synthesis ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);

    // Input signal with envelope for variation
    let env_lfo = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(3.0), // 3 Hz envelope
        waveform: Waveform::Sine,
        phase: 0.0,
    });

    let osc = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(100.0),
        waveform: Waveform::Saw,
        phase: 0.0,
    });

    // Apply envelope to create variation
    let input = graph.add_node(SignalNode::Multiply {
        a: Signal::Node(osc),
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Add(
            Signal::Node(env_lfo),
            Signal::Value(1.0), // Offset to keep positive
        ))),
    });

    // Analyze input
    let rms = graph.add_node(SignalNode::RMS {
        input: Signal::Node(input),
        window_size: 0.01,
        buffer: vec![0.0; 441],
        write_idx: 0,
    });

    let transient = graph.add_node(SignalNode::Transient {
        input: Signal::Node(input),
        threshold: 0.5,
        last_value: 0.0,
    });

    // Synthesis driven by analysis
    let synth_freq = graph.add_node(SignalNode::Add {
        a: Signal::Value(200.0),
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Node(rms),
            Signal::Value(1000.0),
        ))),
    });

    let synth = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Node(synth_freq),
        waveform: Waveform::Sine,
        phase: 0.0,
    });

    // Gate by transients
    let gated = graph.add_node(SignalNode::When {
        input: Signal::Node(synth),
        condition: Signal::Node(transient),
    });

    // Mix original and synthesis
    let mixed = graph.add_node(SignalNode::Add {
        a: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Node(input),
            Signal::Value(0.3),
        ))),
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Node(synth),
            Signal::Value(0.7),
        ))),
    });

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(mixed),
    });

    graph.set_output(output);

    let buffer = graph.render(22050);

    assert!(
        buffer.iter().any(|&s| s != 0.0),
        "Analysis-driven synthesis should work"
    );

    // Verify RMS tracking creates frequency variation
    let chunks = 5;
    let chunk_size = buffer.len() / chunks;
    let mut chunk_powers = Vec::new();

    for i in 0..chunks {
        let chunk = &buffer[i * chunk_size..(i + 1) * chunk_size];
        let power = chunk.iter().map(|s| s * s).sum::<f32>() / chunk_size as f32;
        chunk_powers.push(power);
    }

    let mean_power = chunk_powers.iter().sum::<f32>() / chunks as f32;
    let power_variance = chunk_powers
        .iter()
        .map(|&p| (p - mean_power).powi(2))
        .sum::<f32>()
        / chunks as f32;

    assert!(
        power_variance > 0.0001,
        "Analysis should drive synthesis variation"
    );

    println!(
        "✓ Analysis-driven synthesis verified with variance {:.6}",
        power_variance
    );
}

#[test]
fn test_end_to_end_performance_boundaries() {
    println!("\n=== COHERENCE TEST: Performance Boundaries ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);
    graph.set_cps(8.0); // Fast tempo

    // Create a demanding patch with many nodes
    let mut last_node = graph.add_node(SignalNode::Noise { seed: 42 });

    // Chain of 10 filters
    for i in 0..10 {
        let cutoff = 500.0 + (i as f32 * 200.0);
        last_node = graph.add_node(SignalNode::LowPass {
            input: Signal::Node(last_node),
            cutoff: Signal::Value(cutoff),
            q: Signal::Value(2.0 + i as f32 * 0.1),
            state: Default::default(),
        });
    }

    // Attenuate after filter chain to prevent blow-up
    let attenuated = graph.add_node(SignalNode::Multiply {
        a: Signal::Node(last_node),
        b: Signal::Value(0.1), // Scale down after 10 filters
    });

    // Add pattern modulation
    let pattern = parse_mini_notation("1 0.8 0.6 0.4 0.2 0 0.2 0.4");
    let pattern_node = graph.add_node(SignalNode::Pattern {
        pattern_str: "1 0.8 0.6 0.4 0.2 0 0.2 0.4".to_string(),
        pattern,
        last_value: 1.0,
        last_trigger_time: -1.0,
    });

    let modulated = graph.add_node(SignalNode::Multiply {
        a: Signal::Node(attenuated),
        b: Signal::Node(pattern_node),
    });

    // Add delay network
    let delayed = graph.add_node(SignalNode::Delay {
        input: Signal::Node(modulated),
        time: Signal::Value(0.125),
        feedback: Signal::Value(0.6),
        mix: Signal::Value(0.4),
        buffer: vec![0.0; 11025],
        write_idx: 0,
    });

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(delayed),
    });

    graph.set_output(output);

    // Should handle complex patch
    let buffer = graph.render(44100);

    assert!(buffer.len() == 44100, "Should render full buffer");
    assert!(
        buffer.iter().any(|&s| s != 0.0),
        "Complex patch should produce output"
    );

    // Check output is reasonable (not blown up)
    let max_val = buffer.iter().map(|s| s.abs()).fold(0.0f32, f32::max);
    assert!(max_val < 2.0, "Output should remain in reasonable range");

    println!("✓ Performance boundaries verified: 10 filters + patterns + delay");
}

/// Master coherence test that verifies the entire system works together
#[test]
fn test_master_system_coherence() {
    println!("\n=== MASTER COHERENCE TEST: Full System Integration ===");

    let mut graph = UnifiedSignalGraph::new(44100.0);
    graph.set_cps(2.0);

    // This test combines ALL major features:
    // 1. Patterns
    // 2. Synthesis
    // 3. Filters
    // 4. Analysis
    // 5. Modulation
    // 6. Buses
    // 7. Expressions
    // 8. Delays
    // 9. Envelopes
    // 10. Conditional processing

    // Layer 1: Rhythm patterns - using numeric triggers
    let kick_pattern = parse_mini_notation("1 0 0 1");
    let kick_trig = graph.add_node(SignalNode::Pattern {
        pattern_str: "1 0 0 1".to_string(),
        pattern: kick_pattern,
        last_value: 0.0,
        last_trigger_time: -1.0,
    });
    graph.add_bus("kick_trig".to_string(), kick_trig);

    let hat_pattern = parse_mini_notation("0 1 0 1");
    let hat_trig = graph.add_node(SignalNode::Pattern {
        pattern_str: "0 1 0 1".to_string(),
        pattern: hat_pattern,
        last_value: 0.0,
        last_trigger_time: -1.0,
    });

    // Layer 2: Sound sources
    let kick = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(60.0),
        waveform: Waveform::Sine,
        phase: 0.0,
    });

    let kick_env = graph.add_node(SignalNode::Envelope {
        input: Signal::Node(kick),
        trigger: Signal::Bus("kick_trig".to_string()),
        attack: 0.001,
        decay: 0.1,
        sustain: 0.0,
        release: 0.05,
        state: Default::default(),
    });
    graph.add_bus("kick".to_string(), kick_env);

    // Layer 3: Bass line with sidechain - higher frequencies for more zero crossings
    let bass_notes = parse_mini_notation("220 220 330 220");
    let bass_freq = graph.add_node(SignalNode::Pattern {
        pattern_str: "220 220 330 220".to_string(),
        pattern: bass_notes,
        last_value: 220.0,
        last_trigger_time: -1.0,
    });

    let bass = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Node(bass_freq),
        waveform: Waveform::Saw,
        phase: 0.0,
    });

    // Sidechain compression from kick
    let sidechain = graph.add_node(SignalNode::Add {
        a: Signal::Value(1.0),
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Bus("kick_trig".to_string()),
            Signal::Value(-0.8),
        ))),
    });

    let bass_compressed = graph.add_node(SignalNode::Multiply {
        a: Signal::Node(bass),
        b: Signal::Node(sidechain),
    });

    // Layer 4: Filter with LFO
    let lfo = graph.add_node(SignalNode::Oscillator {
        freq: Signal::Value(0.25),
        waveform: Waveform::Triangle,
        phase: 0.0,
    });
    graph.add_bus("lfo".to_string(), lfo);

    let filter_cutoff = graph.add_node(SignalNode::Add {
        a: Signal::Value(500.0),
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Bus("lfo".to_string()),
            Signal::Value(1500.0),
        ))),
    });

    let bass_filtered = graph.add_node(SignalNode::LowPass {
        input: Signal::Node(bass_compressed),
        cutoff: Signal::Node(filter_cutoff),
        q: Signal::Value(3.0),
        state: Default::default(),
    });

    // Layer 5: Mix with delay send
    let mix_dry = graph.add_node(SignalNode::Add {
        a: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Bus("kick".to_string()),
            Signal::Value(0.8),
        ))),
        b: Signal::Expression(Box::new(phonon::unified_graph::SignalExpr::Multiply(
            Signal::Node(bass_filtered),
            Signal::Value(0.4),
        ))),
    });

    let delay = graph.add_node(SignalNode::Delay {
        input: Signal::Node(mix_dry),
        time: Signal::Value(0.375), // Dotted eighth
        feedback: Signal::Value(0.4),
        mix: Signal::Value(0.3),
        buffer: vec![0.0; 33075],
        write_idx: 0,
    });

    // Layer 6: Analysis and soft limiting
    let rms = graph.add_node(SignalNode::RMS {
        input: Signal::Node(delay),
        window_size: 0.05,
        buffer: vec![0.0; 2205],
        write_idx: 0,
    });

    // Soft limiter using tanh
    let limited = graph.add_node(SignalNode::Multiply {
        a: Signal::Node(delay),
        b: Signal::Value(0.5), // Scale down to prevent clipping
    });

    let output = graph.add_node(SignalNode::Output {
        input: Signal::Node(limited),
    });

    graph.set_output(output);

    // Render 2 seconds
    let buffer = graph.render(88200);

    // Comprehensive analysis
    assert!(buffer.len() == 88200, "Should render complete buffer");

    let non_zero = buffer.iter().filter(|&&s| s.abs() > 0.001).count();
    assert!(non_zero > 44100, "Should have substantial output");

    // Check for rhythm (peaks from kicks)
    let mut peaks = Vec::new();
    let window = 5512; // ~1/8 second
    for i in 0..16 {
        let start = i * window;
        let end = ((i + 1) * window).min(buffer.len());
        if end > start {
            let peak = buffer[start..end]
                .iter()
                .map(|s| s.abs())
                .fold(0.0f32, f32::max);
            peaks.push(peak);
        }
    }

    let peak_variance = peaks
        .iter()
        .map(|&p| (p - peaks.iter().sum::<f32>() / peaks.len() as f32).powi(2))
        .sum::<f32>()
        / peaks.len() as f32;

    assert!(peak_variance > 0.001, "Should have rhythmic variation");

    // Check for frequency content (bass modulation)
    let mid_section = &buffer[44100..66150]; // Middle 0.5 seconds
    let zero_crossings = mid_section
        .windows(2)
        .filter(|w| (w[0] > 0.0) != (w[1] > 0.0))
        .count();

    // With bass at 220-330 Hz, expect ~400-600 zero crossings in 0.5 seconds
    assert!(
        zero_crossings > 200,
        "Should have rich frequency content (got {})",
        zero_crossings
    );

    // Check dynamic range
    let max_val = buffer.iter().map(|s| s.abs()).fold(0.0f32, f32::max);
    let avg_val = buffer.iter().map(|s| s.abs()).sum::<f32>() / buffer.len() as f32;

    assert!(max_val > avg_val * 2.0, "Should have dynamic range");
    assert!(max_val < 2.0, "Should not clip");

    println!("✓ MASTER COHERENCE VERIFIED!");
    println!("  - Rhythm patterns: ✓");
    println!("  - Synthesis: ✓");
    println!("  - Sidechain compression: ✓");
    println!("  - Filter modulation: ✓");
    println!("  - Delay effects: ✓");
    println!("  - Bus routing: ✓");
    println!("  - Analysis feedback: ✓");
    println!("  - Peak variance: {:.4}", peak_variance);
    println!("  - Zero crossings: {}", zero_crossings);
    println!("  - Dynamic range: {:.1}x", max_val / avg_val);
}
