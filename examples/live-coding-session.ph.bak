// ============================================================
// Live Coding Session Example
// Demonstrates real-time patching and cross-modulation
// ============================================================

// Start with a simple beat
~kick = "bd ~ ~ bd"

// Add some hats
~hats = "hh*8" # gain(0.3)

// Mix drums
~drums = ~kick + ~hats
out = ~drums

// === Now let's add a bassline ===
~bass_env = perc(0.01, 0.2)
~bass = saw(55) * ~bass_env # lpf(800, 0.8)

// Update output
out = ~drums * 0.6 + ~bass * 0.4

// === Add an LFO for movement ===
~lfo = sine(0.5) * 0.5 + 0.5

// Modulate the bass filter
~bass = saw(55) * ~bass_env # lpf(~lfo * 1500 + 500, 0.8)

// === Cross-modulation time! ===
// Extract bass level
~bass_level = ~bass # rms(0.05)

// Use bass to modulate hi-hats
~hats = "hh*8" # hpf(~bass_level * 5000 + 2000, 0.8) # gain(0.3)

// === Add sidechain compression ===
~kick_transient = ~kick # transient
~bass_ducked = ~bass * (1 - ~kick_transient * 0.5)

// Update mix with ducked bass
out = ~drums * 0.6 + ~bass_ducked * 0.4

// === Add a lead melody ===
~lead_pattern = "c5 ~ e5 ~ g5 ~ e5 ~"
~lead = ~lead_pattern # saw # lpf(2000, 0.5) # gain(0.2)

// Add delay to lead
~lead_delayed = ~lead # delay(0.375) # gain(0.5)
~lead_mix = ~lead + ~lead_delayed

// === Create chord progression ===
synthdef cmaj sine(261.63) + sine(329.63) + sine(392.0)
synthdef fmaj sine(349.23) + sine(440.0) + sine(523.25)
synthdef gmaj sine(392.0) + sine(493.88) + sine(587.33)
synthdef amin sine(440.0) + sine(523.25) + sine(659.25)

~chords = "cmaj ~ ~ ~ fmaj ~ ~ ~ gmaj ~ ~ ~ amin ~ ~ ~" # gain(0.15)

// === Add reverb send ===
~reverb_send = (~lead_mix * 0.5) + (~chords * 0.3)
~reverb = ~reverb_send # reverb(0.7, 0.8)

// === Final mix ===
~mix = ~drums * 0.5 + ~bass_ducked * 0.3 + ~lead_mix * 0.2 + ~chords * 0.15 + ~reverb * 0.15

// Master compression
~master = ~mix # compress(0.3, 4) # limit(0.95)
out = ~master

// === Live performance controls ===
// These can be modulated via OSC messages:
~filter_mod = 0.5     // Control bass filter cutoff
~delay_feedback = 0.3 // Control delay feedback
~reverb_mix = 0.7     // Control reverb amount

// Apply live controls
~bass = saw(55) * ~bass_env # lpf(~filter_mod * 2000 + 500, 0.8)
~lead_delayed = ~lead # delay(0.375, ~delay_feedback) # gain(0.5)
~reverb = ~reverb_send # reverb(~reverb_mix, 0.8)

// === Visualization helpers ===
~viz_bass = ~bass_level
~viz_kick = ~kick_transient
~viz_master = ~master # rms(0.01)