warning: unused import: `std::collections::HashMap`
  --> src/dsl_osc_handler.rs:12:5
   |
12 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `error`
  --> src/dsl_osc_handler.rs:13:21
   |
13 | use tracing::{info, error, debug};
   |                     ^^^^^

warning: unused imports: `AnalysisType` and `BusId`
 --> src/enhanced_parser.rs:6:32
  |
6 |     SignalGraph, Node, NodeId, BusId,
  |                                ^^^^^
7 |     SourceType, ProcessorType, AnalysisType
  |                                ^^^^^^^^^^^^

warning: unused imports: `Fraction`, `Pattern`, `State`, and `TimeSpan`
   --> src/enhanced_parser.rs:584:38
    |
584 |                 use crate::pattern::{Pattern, State, TimeSpan, Fraction};
    |                                      ^^^^^^^  ^^^^^  ^^^^^^^^  ^^^^^^^^

warning: unused import: `crate::signal_graph::SignalGraph`
 --> src/live.rs:8:5
  |
8 | use crate::signal_graph::SignalGraph;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Receiver`, `Sender`, and `channel`
  --> src/live.rs:11:23
   |
11 | use std::sync::mpsc::{channel, Sender, Receiver};
   |                       ^^^^^^^  ^^^^^^  ^^^^^^^^

warning: unused import: `State`
 --> src/pattern_ops.rs:4:36
  |
4 | use crate::pattern::{Pattern, Hap, State, TimeSpan, Fraction};
  |                                    ^^^^^

warning: unnecessary parentheses around assigned value
   --> src/pattern_ops.rs:201:35
    |
201 |                     let hap_pos = (hap.part.begin.to_float() % 1.0);
    |                                   ^                               ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
201 -                     let hap_pos = (hap.part.begin.to_float() % 1.0);
201 +                     let hap_pos = hap.part.begin.to_float() % 1.0;
    |

warning: unused import: `std::collections::HashMap`
 --> src/pattern_ops_extended.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Hap`
  --> src/pattern_test.rs:6:58
   |
6  | use crate::pattern::{Pattern, State, TimeSpan, Fraction, Hap};
   |                                                          ^^^
   |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
  --> src/lib.rs:18:1
   |
18 | pub mod pattern_test;
   | ^^^^^^^^^^^^^^^^^^^^^

warning: unused doc comment
  --> src/pattern_tonal.rs:11:1
   |
11 | /// Note names to MIDI mapping
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macro invocations
   |
   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion
   = note: `#[warn(unused_doc_comments)]` on by default

warning: unused import: `Uniform`
 --> src/pattern_signal.rs:8:41
  |
8 | use rand::distributions::{Distribution, Uniform, WeightedIndex};
  |                                         ^^^^^^^

warning: unused import: `std::sync::Arc`
 --> src/pattern_signal.rs:9:5
  |
9 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `Rng` and `SeedableRng`
 --> src/pattern_structure.rs:7:12
  |
7 | use rand::{Rng, SeedableRng};
  |            ^^^  ^^^^^^^^^^^

warning: unused import: `rand::rngs::StdRng`
 --> src/pattern_structure.rs:8:5
  |
8 | use rand::rngs::StdRng;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/pattern_midi.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Fraction`, `Hap`, and `TimeSpan`
 --> src/mini_notation.rs:5:31
  |
5 | use crate::pattern::{Pattern, Fraction, TimeSpan, Hap};
  |                               ^^^^^^^^  ^^^^^^^^  ^^^

warning: unused import: `std::sync::Arc`
 --> src/mini_notation.rs:6:5
  |
6 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `Hap`
 --> src/phonon_lang.rs:6:31
  |
6 | use crate::pattern::{Pattern, Hap, State, TimeSpan, Fraction};
  |                               ^^^

warning: unused import: `State`
 --> src/glicol_dsp.rs:7:31
  |
7 | use crate::pattern::{Pattern, State};
  |                               ^^^^^

warning: unused import: `LfoShape`
 --> src/glicol_parser.rs:8:60
  |
8 | use crate::glicol_dsp::{DspChain, DspNode, DspEnvironment, LfoShape};
  |                                                            ^^^^^^^^

warning: unused import: `crate::signal_graph::SignalGraph`
 --> src/glicol_parser.rs:9:5
  |
9 | use crate::signal_graph::SignalGraph;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/glicol_parser.rs:10:5
   |
10 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `DspNode`
 --> src/glicol_pattern_bridge.rs:8:35
  |
8 | use crate::glicol_dsp::{DspChain, DspNode, DspEnvironment};
  |                                   ^^^^^^^

warning: unused import: `NodeId`
  --> src/glicol_pattern_bridge.rs:10:40
   |
10 | use crate::signal_graph::{SignalGraph, NodeId};
   |                                        ^^^^^^

warning: unused import: `fundsp::hacker`
 --> src/glicol_dsp.rs:9:5
  |
9 | use fundsp::hacker::*;
  |     ^^^^^^^^^^^^^^

warning: unused variable: `msg`
   --> src/dsl_osc_handler.rs:253:34
    |
253 |     fn handle_analyze(&mut self, msg: &OscMessage) -> Result<(), String> {
    |                                  ^^^ help: if this is intentional, prefix it with an underscore: `_msg`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `definition`
   --> src/dsl_osc_handler.rs:263:71
    |
263 |             if let (Some(OscType::String(name)), Some(OscType::String(definition))) = 
    |                                                                       ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_definition`

warning: unused variable: `n`
   --> src/enhanced_parser.rs:686:32
    |
686 |             Expression::Number(n) => {
    |                                ^ help: if this is intentional, prefix it with an underscore: `_n`

warning: unused variable: `n`
   --> src/enhanced_parser.rs:746:32
    |
746 |             Expression::Number(n) => {
    |                                ^ help: if this is intentional, prefix it with an underscore: `_n`

warning: unused variable: `pattern`
   --> src/pattern.rs:491:17
    |
491 |         let mut pattern = vec![false; steps];
    |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pattern`

warning: variable `level` is assigned to, but never used
   --> src/pattern.rs:495:17
    |
495 |         let mut level = 0;
    |                 ^^^^^
    |
    = note: consider using `_level` instead

warning: variable does not need to be mutable
   --> src/pattern.rs:491:13
    |
491 |         let mut pattern = vec![false; steps];
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `b`
  --> src/pattern_ops_extended.rs:37:13
   |
37 |         let b = Fraction::from_float(begin);
   |             ^ help: if this is intentional, prefix it with an underscore: `_b`

warning: unused variable: `e`
  --> src/pattern_ops_extended.rs:38:13
   |
38 |         let e = Fraction::from_float(end);
   |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `velocity_var`
   --> src/pattern_ops_extended.rs:155:42
    |
155 |     pub fn humanize(self, time_var: f64, velocity_var: f64) -> Self {
    |                                          ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_velocity_var`

warning: unused variable: `gain`
   --> src/pattern_ops_extended.rs:164:21
    |
164 |                 let gain = feedback.powi(i as i32);
    |                     ^^^^ help: if this is intentional, prefix it with an underscore: `_gain`

warning: unused variable: `n`
   --> src/pattern_ops_extended.rs:316:27
    |
316 |     pub fn scramble(self, n: usize) -> Self {
    |                           ^ help: if this is intentional, prefix it with an underscore: `_n`

warning: unused variable: `amount`
   --> src/pattern_ops_extended.rs:598:23
    |
598 |     pub fn gain(self, amount: f64) -> Self {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_amount`

warning: unused variable: `position`
   --> src/pattern_ops_extended.rs:604:22
    |
604 |     pub fn pan(self, position: f64) -> Self {
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `accel`
   --> src/pattern_ops_extended.rs:619:21
    |
619 |                 let accel = 1.0 + (rate * i as f64);
    |                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_accel`

warning: variable does not need to be mutable
   --> src/pattern_ops_extended.rs:618:51
    |
618 |             haps.into_iter().enumerate().map(|(i, mut hap)| {
    |                                                   ----^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: unused variable: `freq`
   --> src/pattern_ops_extended.rs:627:25
    |
627 |     pub fn cutoff(self, freq: f64) -> Self {
    |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_freq`

warning: unused variable: `amount`
   --> src/pattern_ops_extended.rs:633:28
    |
633 |     pub fn resonance(self, amount: f64) -> Self {
    |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_amount`

warning: unused variable: `amount`
   --> src/pattern_ops_extended.rs:639:24
    |
639 |     pub fn delay(self, amount: f64) -> Self {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_amount`

warning: unused variable: `amount`
   --> src/pattern_ops_extended.rs:645:23
    |
645 |     pub fn room(self, amount: f64) -> Self {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_amount`

warning: unused variable: `amount`
   --> src/pattern_ops_extended.rs:651:26
    |
651 |     pub fn distort(self, amount: f64) -> Self {
    |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_amount`

warning: unused variable: `n`
  --> src/pattern_structure.rs:12:23
   |
12 |     pub fn bite(self, n: usize, patterns: Vec<Pattern<T>>) -> Pattern<T> {
   |                       ^ help: if this is intentional, prefix it with an underscore: `_n`

warning: unused variable: `freq`
   --> src/sample_loader.rs:141:9
    |
141 |     let freq = 1.0; // Play at 1 Hz (will sound wrong but proves it works)
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_freq`

warning: unused variable: `total_duration`
   --> src/midi_output.rs:128:13
    |
128 |         let total_duration = duration_beats * beat_duration;
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_total_duration`

warning: unused variable: `step_duration`
   --> src/midi_output.rs:136:13
    |
136 |         let step_duration = beat_duration / resolution as f32;
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_duration`

warning: unused variable: `velocity`
   --> src/midi_output.rs:177:65
    |
177 |                     if let MidiMessage::NoteOn { channel, note, velocity } = midi_msg {
    |                                                                 ^^^^^^^^ help: try ignoring the field: `velocity: _`

warning: unused variable: `patterns`
   --> src/mini_notation.rs:234:17
    |
234 |         let mut patterns: Vec<Pattern<String>> = Vec::new();
    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_patterns`

warning: variable does not need to be mutable
   --> src/mini_notation.rs:234:13
    |
234 |         let mut patterns: Vec<Pattern<String>> = Vec::new();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `n`
   --> src/mini_notation.rs:455:29
    |
455 |                         let n = *n as usize;
    |                             ^ help: if this is intentional, prefix it with an underscore: `_n`

warning: unused variable: `name`
   --> src/phonon_lang.rs:305:14
    |
305 |         for (name, value) in &self.patterns {
    |              ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `damp`
   --> src/glicol_dsp.rs:159:41
    |
159 |                 DspNode::Reverb { room, damp } => Node::Processor {
    |                                         ^^^^ help: try ignoring the field: `damp: _`

warning: unused variable: `pattern`
   --> src/glicol_dsp.rs:175:36
    |
175 |                 DspNode::Pattern { pattern } => {
    |                                    ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `bus_id`
   --> src/glicol_dsp.rs:253:17
    |
253 |             let bus_id = BusId(name.clone());
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_bus_id`

warning: variable does not need to be mutable
   --> src/glicol_dsp.rs:254:17
    |
254 |             let mut chain_graph = chain.clone().build_graph(sample_rate)?;
    |                 ----^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/glicol_dsp.rs:264:17
    |
264 |             let mut output_graph = output.clone().build_graph(sample_rate)?;
    |                 ----^^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: unused variable: `input`
   --> src/glicol_pattern_bridge.rs:167:35
    |
167 |     fn parse_dsp_chain(&mut self, input: &str) -> Result<(), String> {
    |                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `chain_str`
   --> src/glicol_pattern_bridge.rs:183:13
    |
183 |         let chain_str = parts[1].trim();
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chain_str`

warning: unused variable: `dsp_str`
   --> src/glicol_pattern_bridge.rs:212:64
    |
212 |     fn parse_pattern_through_dsp(&mut self, pattern_str: &str, dsp_str: &str) -> Result<(), String> {
    |                                                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dsp_str`

warning: unused variable: `synth_def`
   --> src/glicol_pattern_bridge.rs:230:9
    |
230 |         synth_def: &str
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_synth_def`

warning: methods `peek_token` and `expression_to_nodes` are never used
   --> src/enhanced_parser.rs:111:8
    |
90  | impl EnhancedParser {
    | ------------------- methods in this implementation
...
111 |     fn peek_token(&self) -> &Token {
    |        ^^^^^^^^^^
...
744 |     fn expression_to_nodes(&mut self, expr: &Expression, context: &str) -> Result<NodeId, String> {
    |        ^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `sample_rate` is never read
  --> src/signal_executor.rs:78:5
   |
77 | pub struct NodeProcessor {
   |            ------------- field in this struct
78 |     sample_rate: f32,
   |     ^^^^^^^^^^^

warning: field `sample_rate` is never read
  --> src/pattern_bridge.rs:54:5
   |
40 | pub struct PatternBridge {
   |            ------------- field in this struct
...
54 |     sample_rate: f32,
   |     ^^^^^^^^^^^

warning: fields `sample_rate`, `prev_magnitude`, and `fft_size` are never read
  --> src/audio_analysis.rs:87:5
   |
86 | pub struct TransientDetector {
   |            ----------------- fields in this struct
87 |     sample_rate: f32,
   |     ^^^^^^^^^^^
88 |     prev_magnitude: Vec<f32>,
   |     ^^^^^^^^^^^^^^
89 |     history: VecDeque<f32>,
90 |     fft_size: usize,
   |     ^^^^^^^^

warning: fields `fft_size`, `window`, and `buffer` are never read
   --> src/audio_analysis.rs:143:5
    |
141 | pub struct SpectralCentroid {
    |            ---------------- fields in this struct
142 |     sample_rate: f32,
143 |     fft_size: usize,
    |     ^^^^^^^^
144 |     window: Vec<f32>,
    |     ^^^^^^
145 |     buffer: Vec<f32>,
    |     ^^^^^^

warning: fields `sample_rate` and `lookahead_frames` are never read
  --> src/engine.rs:23:5
   |
19 | struct Scheduler {
   |        --------- fields in this struct
...
23 |     sample_rate: u32,
   |     ^^^^^^^^^^^
24 |     lookahead_frames: u32,
   |     ^^^^^^^^^^^^^^^^

warning: function `pattern_to_string` is never used
  --> src/pattern_test.rs:12:4
   |
12 | fn pattern_to_string<T: std::fmt::Debug + Clone + Send + Sync + 'static>(
   |    ^^^^^^^^^^^^^^^^^

warning: function `pattern_hash` is never used
  --> src/pattern_test.rs:41:4
   |
41 | fn pattern_hash<T: std::fmt::Debug + Clone + Send + Sync + 'static>(
   |    ^^^^^^^^^^^^

warning: field `sample_rate` is never read
  --> src/pattern_sequencer_voice.rs:27:5
   |
13 | pub struct PatternSequencer {
   |            ---------------- field in this struct
...
27 |     sample_rate: f32,
   |     ^^^^^^^^^^^

warning: field `connection` is never read
  --> src/midi_output.rs:18:5
   |
17 | pub struct MidiOutputHandler {
   |            ----------------- field in this struct
18 |     connection: Option<MidiOutputConnection>,
   |     ^^^^^^^^^^

warning: field `osc_server` is never read
   --> src/osc_control.rs:290:5
    |
285 | pub struct OscPatternEngine {
    |            ---------------- field in this struct
...
290 |     osc_server: Option<OscServer>,
    |     ^^^^^^^^^^

warning: method `peek` is never used
   --> src/mini_notation.rs:223:8
    |
203 | impl MiniNotationParser {
    | ----------------------- method in this implementation
...
223 |     fn peek(&self) -> Option<&Token> {
    |        ^^^^

warning: field `tempo_bpm` is never read
  --> src/glicol_pattern_bridge.rs:72:5
   |
64 | pub struct PatternDspEngine {
   |            ---------------- field in this struct
...
72 |     tempo_bpm: f32,
   |     ^^^^^^^^^

warning: unused import: `crate::signal_parser::SignalParser`
   --> src/signal_executor.rs:358:9
    |
358 |     use crate::signal_parser::SignalParser;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::pattern_tonal::*`
   --> src/pattern_ops.rs:453:13
    |
453 |         use crate::pattern_tonal::*;
    |             ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Hap`
 --> src/pattern_test.rs:6:58
  |
6 | use crate::pattern::{Pattern, State, TimeSpan, Fraction, Hap};
  |                                                          ^^^

warning: unused import: `crate::pattern_ops::*`
   --> src/pattern_test.rs:232:9
    |
232 |     use crate::pattern_ops::*;
    |         ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::*`
   --> src/pattern_query.rs:391:9
    |
391 |     use super::*;
    |         ^^^^^^^^

warning: unused import: `Hap`
 --> src/mini_notation.rs:5:51
  |
5 | use crate::pattern::{Pattern, Fraction, TimeSpan, Hap};
  |                                                   ^^^

warning: unused variable: `graph`
   --> src/signal_parser.rs:562:13
    |
562 |         let graph = result.unwrap();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_graph`

warning: unused variable: `graph`
   --> src/signal_parser.rs:573:13
    |
573 |         let graph = result.unwrap();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_graph`

warning: unused variable: `output`
   --> src/pattern_test.rs:170:13
    |
170 |         let output = pattern_to_string(p.clone(), 2.0);
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_output`

warning: unused variable: `cycle1`
   --> src/pattern_test.rs:173:13
    |
173 |         let cycle1 = pattern_to_string(p.clone(), 1.0);
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_cycle1`

warning: unused variable: `output`
   --> src/pattern_test.rs:355:13
    |
355 |         let output = pattern_to_string(p.clone(), 3.0);
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_output`

warning: `phonon` (lib) generated 78 warnings (run `cargo fix --lib -p phonon` to apply 29 suggestions)
warning: `phonon` (lib test) generated 83 warnings (72 duplicates) (run `cargo fix --lib -p phonon --tests` to apply 6 suggestions)
warning: unused import: `render_cli`
 --> src/main.rs:4:22
  |
4 | use phonon::render::{render_cli, RenderConfig, Renderer};
  |                      ^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::pattern_tonal::*`
 --> examples/quick_demo.rs:5:5
  |
5 | use phonon::pattern_tonal::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::pattern_ops::*`
 --> examples/test_palindrome_debug.rs:2:5
  |
2 | use phonon::pattern_ops::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `env`
   --> examples/glicol_integration.rs:111:12
    |
111 |         Ok(env) => {
    |            ^^^ help: if this is intentional, prefix it with an underscore: `_env`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused import: `phonon::pattern::Pattern`
 --> tests/dsp_integration_gap_tests.rs:3:5
  |
3 | use phonon::pattern::Pattern;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::glicol_parser::parse_glicol`
 --> tests/dsp_integration_gap_tests.rs:4:5
  |
4 | use phonon::glicol_parser::parse_glicol;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `phonon::enhanced_parser::EnhancedParser`
 --> tests/dsp_integration_gap_tests.rs:5:5
  |
5 | use phonon::enhanced_parser::EnhancedParser;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `code`
  --> tests/dsp_integration_gap_tests.rs:11:9
   |
11 |     let code = r#"
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `code`
  --> tests/dsp_integration_gap_tests.rs:26:9
   |
26 |     let code = r#"
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
  --> tests/dsp_integration_gap_tests.rs:40:9
   |
40 |     let code = r#"
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
  --> tests/dsp_integration_gap_tests.rs:54:9
   |
54 |     let code = r#"
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
  --> tests/dsp_integration_gap_tests.rs:68:9
   |
68 |     let code = r#"
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
  --> tests/dsp_integration_gap_tests.rs:83:9
   |
83 |     let code = r#"
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
  --> tests/dsp_integration_gap_tests.rs:97:9
   |
97 |     let code = r#"
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
   --> tests/dsp_integration_gap_tests.rs:111:9
    |
111 |     let code = r#"
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
   --> tests/dsp_integration_gap_tests.rs:126:9
    |
126 |     let code = r#"
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
   --> tests/dsp_integration_gap_tests.rs:141:9
    |
141 |     let code = r#"
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
   --> tests/dsp_integration_gap_tests.rs:156:9
    |
156 |     let code = r#"
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `code`
   --> tests/dsp_integration_gap_tests.rs:171:9
    |
171 |     let code = r#"
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused import: `Pattern`
 --> tests/audio_verification_tests.rs:6:23
  |
6 | use phonon::pattern::{Pattern, State, TimeSpan, Fraction};
  |                       ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::pattern::Pattern`
 --> examples/midi_example.rs:3:5
  |
3 | use phonon::pattern::Pattern;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `MidiScheduler` and `note_to_midi_message`
 --> examples/midi_example.rs:4:46
  |
4 | use phonon::midi_output::{MidiOutputHandler, MidiScheduler, note_to_midi_message};
  |                                              ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::thread`
 --> examples/midi_example.rs:6:5
  |
6 | use std::thread;
  |     ^^^^^^^^^^^

warning: unused import: `std::time::Duration`
 --> examples/midi_example.rs:7:5
  |
7 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused variable: `melody`
  --> examples/midi_example.rs:33:9
   |
33 |     let melody = parse_mini_notation("c4 e4 g4 c5");
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_melody`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `chords`
  --> examples/midi_example.rs:37:9
   |
37 |     let chords = parse_mini_notation("<c4'maj e4'min g4'maj>");
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_chords`

warning: unused variable: `drums`
  --> examples/midi_example.rs:41:9
   |
41 |     let drums = parse_mini_notation("bd*4 [~ cp] hh*8");
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_drums`

warning: unused variable: `euclidean`
  --> examples/midi_example.rs:45:9
   |
45 |     let euclidean = parse_mini_notation("bd(3,8) cp(5,8)");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_euclidean`

warning: unused variable: `complex`
  --> examples/midi_example.rs:49:9
   |
49 |     let complex = parse_mini_notation("<[c4 e4] [g4 b4]> . fast(2) . sometimes(degrade)");
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_complex`

warning: unused variable: `p2`
   --> tests/implementation_gap_tests.rs:171:9
    |
171 |     let p2 = parse_mini_notation("~ ~ ~ sn");
    |         ^^ help: if this is intentional, prefix it with an underscore: `_p2`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `events`
   --> tests/implementation_gap_tests.rs:249:9
    |
249 |     let events = sum.query(&state);
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_events`

warning: `phonon` (bin "phonon" test) generated 1 warning (run `cargo fix --bin "phonon" --tests` to apply 1 suggestion)
warning: `phonon` (example "quick_demo") generated 1 warning (run `cargo fix --example "quick_demo"` to apply 1 suggestion)
warning: `phonon` (example "test_palindrome_debug") generated 1 warning (run `cargo fix --example "test_palindrome_debug"` to apply 1 suggestion)
warning: `phonon` (example "glicol_integration") generated 1 warning
warning: `phonon` (test "dsp_integration_gap_tests") generated 15 warnings (run `cargo fix --test "dsp_integration_gap_tests"` to apply 3 suggestions)
warning: `phonon` (test "audio_verification_tests") generated 1 warning (run `cargo fix --test "audio_verification_tests"` to apply 1 suggestion)
warning: `phonon` (bin "phonon") generated 1 warning (1 duplicate)
warning: `phonon` (example "midi_example") generated 9 warnings (run `cargo fix --example "midi_example"` to apply 4 suggestions)
warning: `phonon` (test "implementation_gap_tests") generated 2 warnings
warning: unused import: `phonon::pattern_ops::*`
 --> examples/complete_operator_demo.rs:6:5
  |
6 | use phonon::pattern_ops::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::pattern_ops_extended::*`
 --> examples/complete_operator_demo.rs:7:5
  |
7 | use phonon::pattern_ops_extended::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `phonon::pattern_tonal::*`
 --> examples/complete_operator_demo.rs:8:5
  |
8 | use phonon::pattern_tonal::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `phonon::pattern_query::*`
  --> examples/complete_operator_demo.rs:11:5
   |
11 | use phonon::pattern_query::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `phonon::mini_notation::*`
  --> examples/complete_operator_demo.rs:13:5
   |
13 | use phonon::mini_notation::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `transposed`
  --> examples/complete_operator_demo.rs:41:9
   |
41 |     let transposed = midi_notes.clone().transpose(7);
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transposed`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `c_major`
  --> examples/complete_operator_demo.rs:46:9
   |
46 |     let c_major = degrees.map(|s| s.parse::<f64>().unwrap_or(0.0))
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_c_major`

warning: unused variable: `arp_up`
  --> examples/complete_operator_demo.rs:56:9
   |
56 |     let arp_up = c_maj7.clone().arp("up");
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_arp_up`

warning: unused variable: `arp_down`
  --> examples/complete_operator_demo.rs:57:9
   |
57 |     let arp_down = c_maj7.clone().arp("down");
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_arp_down`

warning: unused variable: `drop2`
  --> examples/complete_operator_demo.rs:61:9
   |
61 |     let drop2 = c_maj7.voicing("drop2");
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_drop2`

warning: unused variable: `sine_wave`
  --> examples/complete_operator_demo.rs:72:9
   |
72 |     let sine_wave = sine();
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sine_wave`

warning: unused variable: `saw_wave`
  --> examples/complete_operator_demo.rs:73:9
   |
73 |     let saw_wave = saw();
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_saw_wave`

warning: unused variable: `square_wave`
  --> examples/complete_operator_demo.rs:74:9
   |
74 |     let square_wave = square();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_square_wave`

warning: unused variable: `perlin_noise`
  --> examples/complete_operator_demo.rs:78:9
   |
78 |     let perlin_noise = perlin();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_perlin_noise`

warning: unused variable: `pink_noise`
  --> examples/complete_operator_demo.rs:79:9
   |
79 |     let pink_noise = pink();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pink_noise`

warning: unused variable: `brown_noise`
  --> examples/complete_operator_demo.rs:80:9
   |
80 |     let brown_noise = brown();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_brown_noise`

warning: unused variable: `random`
  --> examples/complete_operator_demo.rs:84:9
   |
84 |     let random = rand();
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_random`

warning: unused variable: `int_random`
  --> examples/complete_operator_demo.rs:85:9
   |
85 |     let int_random = irand(10);
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_int_random`

warning: unused variable: `choices`
  --> examples/complete_operator_demo.rs:86:9
   |
86 |     let choices = choose(vec!["kick", "snare", "hat"]);
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_choices`

warning: unused variable: `weighted`
  --> examples/complete_operator_demo.rs:87:9
   |
87 |     let weighted = wchoose(vec![("kick", 2.0), ("snare", 1.0), ("hat", 0.5)]);
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_weighted`

warning: unused variable: `adsr`
  --> examples/complete_operator_demo.rs:91:9
   |
91 |     let adsr = envelope(
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_adsr`

warning: unused variable: `walk`
  --> examples/complete_operator_demo.rs:98:9
   |
98 |     let walk = randwalk(0.1, 0.5);
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_walk`

warning: unused variable: `iter_pattern`
   --> examples/complete_operator_demo.rs:111:9
    |
111 |     let iter_pattern = base.clone().iter(4);
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_iter_pattern`

warning: unused variable: `iter_back`
   --> examples/complete_operator_demo.rs:112:9
    |
112 |     let iter_back = base.clone().iter_back(4);
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_iter_back`

warning: unused variable: `bitten`
   --> examples/complete_operator_demo.rs:116:9
    |
116 |     let bitten = base.clone().bite(2, vec![
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_bitten`

warning: unused variable: `chewed`
   --> examples/complete_operator_demo.rs:120:9
    |
120 |     let chewed = base.clone().chew(3);
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_chewed`

warning: unused variable: `plied`
   --> examples/complete_operator_demo.rs:124:9
    |
124 |     let plied = base.clone().ply(3);
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_plied`

warning: unused variable: `lingered`
   --> examples/complete_operator_demo.rs:125:9
    |
125 |     let lingered = base.clone().linger(2.0);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_lingered`

warning: unused variable: `inside`
   --> examples/complete_operator_demo.rs:130:9
    |
130 |     let inside = base.clone().inside(2.0, |p| p.rev());
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_inside`

warning: unused variable: `outside`
   --> examples/complete_operator_demo.rs:131:9
    |
131 |     let outside = base.clone().outside(2.0, |p| p.fast(2.0));
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_outside`

warning: unused variable: `tcat`
   --> examples/complete_operator_demo.rs:135:9
    |
135 |     let tcat = timecat(vec![
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_tcat`

warning: unused variable: `fast_gap`
   --> examples/complete_operator_demo.rs:143:9
    |
143 |     let fast_gap = base.clone().fast_gap(2.0);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fast_gap`

warning: unused variable: `compress_gap`
   --> examples/complete_operator_demo.rs:144:9
    |
144 |     let compress_gap = base.clone().compress_gap(0.25, 0.75);
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compress_gap`

warning: unused variable: `superimposed`
   --> examples/complete_operator_demo.rs:148:9
    |
148 |     let superimposed = base.clone().superimpose(|p| p.fast(2.0));
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_superimposed`

warning: unused variable: `delayed`
   --> examples/complete_operator_demo.rs:152:9
    |
152 |     let delayed = wait(2, base.clone());
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_delayed`

warning: unused variable: `midi_msgs`
   --> examples/complete_operator_demo.rs:164:9
    |
164 |     let midi_msgs = notes.clone().midi(0);
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_midi_msgs`

warning: unused variable: `cc_pattern`
   --> examples/complete_operator_demo.rs:169:9
    |
169 |     let cc_pattern = values.map(|s| s.parse::<f64>().unwrap_or(0.0))
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_cc_pattern`

warning: unused variable: `nrpn_pattern`
   --> examples/complete_operator_demo.rs:174:9
    |
174 |     let nrpn_pattern = notes.clone().nrpn(1, 2, 0);
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nrpn_pattern`

warning: unused variable: `programs`
   --> examples/complete_operator_demo.rs:178:9
    |
178 |     let programs = Pattern::pure(0.5).prog_num(0);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_programs`

warning: unused variable: `bend`
   --> examples/complete_operator_demo.rs:182:9
    |
182 |     let bend = sine().pitch_bend(0);
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_bend`

warning: unused variable: `mpe_pattern`
   --> examples/complete_operator_demo.rs:194:9
    |
194 |     let mpe_pattern = Pattern::pure(mpe);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mpe_pattern`

warning: unused variable: `osc`
   --> examples/complete_operator_demo.rs:198:9
    |
198 |     let osc = Pattern::from_string("play stop reset")
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_osc`

warning: unused variable: `clock`
   --> examples/complete_operator_demo.rs:203:9
    |
203 |     let clock = midi_clock(120.0);
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_clock`

warning: unused variable: `seq`
   --> examples/complete_operator_demo.rs:207:9
    |
207 |     let seq = MidiSequence::new()
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_seq`

warning: unused variable: `arc`
   --> examples/complete_operator_demo.rs:227:9
    |
227 |     let arc = p.clone().query_arc(0.25, 0.75);
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_arc`

warning: unused variable: `density`
   --> examples/complete_operator_demo.rs:231:9
    |
231 |     let density = p.clone().density_analysis();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_density`

warning: unused variable: `unique`
   --> examples/complete_operator_demo.rs:234:9
    |
234 |     let unique = p.clone().unique();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_unique`

warning: unused variable: `info`
   --> examples/complete_operator_demo.rs:242:9
    |
242 |     let info = p.clone().show();
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_info`

warning: unused import: `describe_pattern`
 --> tests/mini_notation_tests.rs:5:29
  |
5 | use phonon::pattern_debug::{describe_pattern, verify_polyphony};
  |                             ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Pattern`
 --> tests/euclidean_rotation_test.rs:2:50
  |
2 | use phonon::pattern::{State, TimeSpan, Fraction, Pattern};
  |                                                  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::pattern_ops::*`
 --> examples/pattern_showcase.rs:6:5
  |
6 | use phonon::pattern_ops::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::pattern_ops_extended::*`
 --> examples/pattern_showcase.rs:7:5
  |
7 | use phonon::pattern_ops_extended::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `parse_extended_notation`
 --> examples/pattern_showcase.rs:8:50
  |
8 | use phonon::mini_notation::{parse_mini_notation, parse_extended_notation};
  |                                                  ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `base`
  --> examples/pattern_showcase.rs:61:9
   |
61 |     let base = Pattern::from_string("a b c d");
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_base`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: function `query_pattern_count` is never used
   --> examples/pattern_showcase.rs:213:4
    |
213 | fn query_pattern_count<T: Clone + Send + Sync + 'static>(pattern: &Pattern<T>, cycles: f64) -> usize {
    |    ^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `phonon::enhanced_parser::EnhancedParser`
 --> examples/phonon_complete_demo.rs:7:5
  |
7 | use phonon::enhanced_parser::EnhancedParser;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::signal_executor::SignalExecutor`
 --> examples/phonon_complete_demo.rs:8:5
  |
8 | use phonon::signal_executor::SignalExecutor;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `phonon::glicol_dsp::dsp::*`
 --> examples/pattern_dsp_integration.rs:4:5
  |
4 | use phonon::glicol_dsp::dsp::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `phonon::pattern::Pattern`
 --> examples/pattern_dsp_integration.rs:5:5
  |
5 | use phonon::pattern::Pattern;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `phonon::pattern_ops::*`
 --> examples/test_late_debug.rs:2:5
  |
2 | use phonon::pattern_ops::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `phonon` (example "complete_operator_demo") generated 48 warnings (run `cargo fix --example "complete_operator_demo"` to apply 5 suggestions)
warning: `phonon` (test "mini_notation_tests") generated 1 warning (run `cargo fix --test "mini_notation_tests"` to apply 1 suggestion)
warning: `phonon` (test "euclidean_rotation_test") generated 1 warning (run `cargo fix --test "euclidean_rotation_test"` to apply 1 suggestion)
warning: `phonon` (example "pattern_showcase") generated 5 warnings (run `cargo fix --example "pattern_showcase"` to apply 3 suggestions)
warning: `phonon` (example "phonon_complete_demo") generated 2 warnings (run `cargo fix --example "phonon_complete_demo"` to apply 2 suggestions)
warning: `phonon` (example "pattern_dsp_integration") generated 2 warnings (run `cargo fix --example "pattern_dsp_integration"` to apply 2 suggestions)
warning: `phonon` (example "test_late_debug") generated 1 warning (run `cargo fix --example "test_late_debug"` to apply 1 suggestion)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.07s
     Running unittests src/lib.rs (target/debug/deps/phonon-779cbac49ba0df50)

running 140 tests
test audio_analysis::tests::test_audio_analyzer ... ok
test dsl_osc_handler::tests::test_create_handler ... ok
test dsl_osc_handler::tests::test_pattern_event ... ok
test audio_analysis::tests::test_spectral_centroid ... ok
test dsl_osc_handler::tests::test_load_patch ... ok
test dsl_osc_handler::tests::test_register_pattern ... ok
test audio_analysis::tests::test_transient_detection ... ok
test dsl_osc_handler::tests::test_clear_patch ... ok
test enhanced_parser::tests::test_parse_arithmetic_expression ... ok
test enhanced_parser::tests::test_parse_pattern_string ... ok
test enhanced_parser::tests::test_parse_bus_reference ... ok
test glicol_dsp::tests::test_chain_building ... ok
test enhanced_parser::tests::test_tokenize_arithmetic ... ok
test dsl_osc_handler::tests::test_set_bus ... ok
test glicol_dsp::tests::test_graph_building ... ok
test glicol_dsp::tests::test_environment ... ok
test glicol_parser::tests::test_pattern_integration ... ok
test glicol_parser::tests::test_reference_chain ... ok
test glicol_parser::tests::test_simple_chain ... ok
test glicol_parser::tests::test_complex_chain - should panic ... ok
test glicol_pattern_bridge::tests::test_pattern_detection ... ok
test glicol_pattern_bridge::tests::test_query ... ok
test glicol_pattern_bridge::tests::test_hybrid_parsing ... ok
test mini_notation::tests::test_alternation_pattern ... ok
test glicol_pattern_bridge::tests::test_voice_creation ... ok
test mini_notation::tests::test_polyrhythm ... ok
test mini_notation::tests::test_extended_notation ... ok
test modulation_router::tests::test_modulation_modes ... ok
test modulation_router::tests::test_add_route ... ok
test mini_notation::tests::test_operators ... ok
test mini_notation::tests::test_tokenizer ... ok
test osc_control::tests::test_osc_message_parsing ... ok
test modulation_router::tests::test_process_modulation ... ok
test pattern::tests::test_euclidean_rhythm ... ok
test midi_output::tests::test_pattern_to_midi ... ok
test mini_notation::tests::test_rest_pattern ... ok
test midi_output::tests::test_midi_message_conversion ... ok
test mini_notation::tests::test_simple_pattern ... ok
test mini_notation::tests::test_group_pattern ... ok
test pattern::tests::test_fast_pattern ... ok
test modulation_router::tests::test_create_modulation_router ... ok
test pattern::tests::test_pure_pattern ... ok
test modulation_router::tests::test_parse_route ... ok
test osc_control::tests::test_pattern_engine ... ok
test osc_control::tests::test_osc_server_creation ... ok
test pattern_bridge::tests::test_audio_feature_extraction ... ok
test pattern_bridge::tests::test_gate_condition ... ok
test pattern_bridge::tests::test_condition_parsing ... ok
test pattern_bridge::tests::test_note_to_frequency ... ok
test pattern_bridge::tests::test_pattern_modulation ... ok
test pattern_bridge::tests::test_pattern_event_processing ... ok
test pattern_bridge::tests::test_pattern_registration ... ok
test pattern_debug::tests::test_pattern_description ... ok
test pattern_midi::tests::test_midi_pattern ... ok
test pattern_midi::tests::test_cc_pattern ... ok
test pattern_debug::tests::test_pattern_visualization ... ok
test pattern_midi::tests::test_osc_pattern ... ok
test midi_output::tests::test_list_devices ... ok
test pattern_ops::tests::test_degrade ... ok
test pattern_debug::tests::test_polyphony_detection ... ok
test pattern_ops::tests::test_note_conversion ... ok
test pattern_ops::tests::test_palindrome ... ok
test pattern_ops_extended::tests::test_compress ... ok
test pattern_ops_extended::tests::test_range ... ok
test pattern_ops_extended::tests::test_swing ... ok
test pattern_ops_extended::tests::test_zoom ... ok
test pattern_query::tests::test_draw_line ... ok
test pattern_query::tests::test_first_cycle ... ok
test pattern_ops_extended::tests::test_quantize ... ok
test pattern_query::tests::test_equivalent ... ok
test pattern_query::tests::test_query_arc ... ok
test pattern_ops_extended::tests::test_echo ... ok
test pattern_ops_extended::tests::test_filter ... ok
test pattern_signal::tests::test_envelope ... ok
test pattern_structure::tests::test_ply ... ok
test pattern_structure::tests::test_iter ... ok
test pattern_structure::tests::test_timecat ... ok
test pattern_signal::tests::test_signal_patterns ... ok
test pattern_test::conditional_operations::test_every ... ok
test pattern_test::conditional_operations::test_when_mod ... ok
test pattern_test::core_patterns::test_from_string ... ok
test pattern_test::core_patterns::test_cat ... ok
test pattern_test::core_patterns::test_pure_pattern ... ok
test pattern_test::core_patterns::test_stack ... ok
test pattern_test::core_patterns::test_silence ... ok
test pattern_test::euclidean_rhythms::test_euclid_5_8 ... ok
test pattern_test::integration_tests::test_pattern_arithmetic ... ok
test pattern_test::euclidean_rhythms::test_euclid_3_8 ... ok
test pattern_test::euclidean_rhythms::test_euclid_rotation ... ok
test pattern_test::integration_tests::test_nested_operations ... ok
test pattern_test::structural_operations::test_dup ... ok
test pattern_test::structural_operations::test_palindrome ... ok
test pattern_test::time_operations::test_early ... ok
test pattern_test::structural_operations::test_stutter ... ok
test pattern_test::time_operations::test_fast ... ok
test pattern_test::probabilistic_operations::test_sometimes_deterministic ... ok
test pattern_test::time_operations::test_late ... ok
test pattern_test::probabilistic_operations::test_degrade_deterministic ... ok
test pattern_test::hash_verification::test_complex_combinations ... ok
test pattern_test::time_operations::test_slow ... ok
test pattern_tonal::tests::test_note_to_midi ... ok
test pattern_tonal::tests::test_pattern_note ... ok
test pattern_test::time_operations::test_rev ... ok
test pattern_tonal::tests::test_midi_to_freq ... ok
test pattern_tonal::tests::test_scale ... ok
test pattern_tonal::tests::test_transpose ... ok
test phonon_lang::tests::test_mini_notation_groups ... ok
test pattern_tonal::tests::test_chord ... ok
test phonon_lang::tests::test_pattern_methods ... ok
test phonon_lang::tests::test_phonon_pattern_parsing ... ok
test signal_executor::tests::test_audio_buffer_analysis ... ok
test signal_executor::tests::test_audio_buffer ... ok
test pattern_test::hash_verification::test_pattern_hashes ... ok
test signal_graph::tests::test_add_nodes ... ok
test signal_graph::tests::test_add_bus ... ok
test signal_graph::tests::test_connections ... ok
test signal_graph::tests::test_create_signal_graph ... ok
test signal_graph::tests::test_cycle_detection ... ok
test signal_graph::tests::test_signal_tap ... ok
test signal_graph::tests::test_topological_sort ... ok
test signal_parser::tests::test_comments ... ok
test signal_parser::tests::test_parse_simple_bus ... ok
test signal_parser::tests::test_tokenizer ... ok
test signal_parser::tests::test_parse_signal_chain ... ok
test signal_parser::tests::test_parse_multiple_buses ... ok
test synth_defs::tests::test_parse_basic_synths ... ok
test synth_defs::tests::test_parse_fm ... ok
test test_utils::tests::test_audio_comparison ... ok
test signal_executor::tests::test_signal_chain ... ok
test test_utils::tests::test_onset_detection ... ok
test signal_executor::tests::test_simple_sine_generation ... ok
test signal_executor::tests::test_rms_analysis ... ok
test signal_executor::tests::test_parallel_mixing ... ok
test test_utils::tests::test_drum_generation ... ok
test render::tests::test_fades ... ok
test signal_executor::tests::test_complex_chain_with_parser ... ok
test signal_executor::tests::test_render_to_wav ... ok
test render::tests::test_render_sine_wave ... ok
test render::tests::test_render_to_file ... ok
test audio_analysis::tests::test_pitch_detection_sine_wave ... ok

test result: ok. 140 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.06s

     Running unittests src/main.rs (target/debug/deps/phonon-e72cd4586a06f765)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/additional_gap_tests.rs (target/debug/deps/additional_gap_tests-e293a70c0d72ce8c)

running 12 tests
test test_pattern_echo - should panic ... ok
test test_pattern_legato - should panic ... ok
test test_pattern_ghost - should panic ... ok
test test_pattern_fit - should panic ... ok
test test_pattern_mask - should panic ... ok
test test_pattern_polyrhythm - should panic ... ok
test test_pattern_range - should panic ... ok
test test_pattern_slice - should panic ... ok
test test_pattern_smear - should panic ... ok
test test_pattern_rotate - should panic ... ok
test test_pattern_swing - should panic ... ok
test test_pattern_weave - should panic ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/audio_verification_tests.rs (target/debug/deps/audio_verification_tests-d348b4df0885421e)

running 9 tests
test test_alternation_pattern_audio ... ignored
test test_euclidean_pattern_audio ... ignored
test test_polyrhythm_audio ... ignored
test test_simple_pattern_audio ... ignored
test test_fast_pattern_audio ... ok
test test_pattern_timing_accuracy ... ok
test test_rest_pattern_audio ... ok
test test_group_pattern_audio ... ok
test test_sample_differentiation ... ok

test result: ok. 5 passed; 0 failed; 4 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/dsp_audio_tests.rs (target/debug/deps/dsp_audio_tests-3eac8c25d678232b)

running 15 tests
test test_amplitude_modulation ... ok
test test_additive_synthesis ... FAILED
test test_chorus_effect ... FAILED
test test_complex_patch ... FAILED
test test_distortion ... FAILED
test test_delay_effect ... FAILED
test test_fm_synthesis ... FAILED
test test_envelope ... FAILED
test test_high_pass_filter ... FAILED
test test_lfo_modulation ... FAILED
test test_low_pass_filter ... FAILED
test test_noise_generators ... FAILED
test test_reverb_effect ... FAILED
test test_ring_modulation ... FAILED
test test_sine_wave_generation ... ok

failures:

---- test_additive_synthesis stdout ----

thread 'test_additive_synthesis' panicked at tests/dsp_audio_tests.rs:46:5:
assertion failed: result.is_ok()
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

---- test_chorus_effect stdout ----

thread 'test_chorus_effect' panicked at tests/dsp_audio_tests.rs:160:5:
assertion failed: result.is_ok()

---- test_complex_patch stdout ----

thread 'test_complex_patch' panicked at tests/dsp_audio_tests.rs:102:5:
assertion failed: result.is_ok()

---- test_distortion stdout ----

thread 'test_distortion' panicked at tests/dsp_audio_tests.rs:147:5:
assertion failed: result.is_ok()

---- test_delay_effect stdout ----

thread 'test_delay_effect' panicked at tests/dsp_audio_tests.rs:77:5:
assertion failed: result.is_ok()

---- test_fm_synthesis stdout ----

thread 'test_fm_synthesis' panicked at tests/dsp_audio_tests.rs:114:5:
assertion failed: result.is_ok()

---- test_envelope stdout ----

thread 'test_envelope' panicked at tests/dsp_audio_tests.rs:65:5:
assertion failed: result.is_ok()

---- test_high_pass_filter stdout ----

thread 'test_high_pass_filter' panicked at tests/dsp_audio_tests.rs:34:5:
assertion failed: result.is_ok()

---- test_lfo_modulation stdout ----

thread 'test_lfo_modulation' panicked at tests/dsp_audio_tests.rs:57:5:
assertion failed: result.is_ok()

---- test_low_pass_filter stdout ----

thread 'test_low_pass_filter' panicked at tests/dsp_audio_tests.rs:26:5:
assertion failed: result.is_ok()

---- test_noise_generators stdout ----

thread 'test_noise_generators' panicked at tests/dsp_audio_tests.rs:139:5:
assertion failed: result.is_ok()

---- test_reverb_effect stdout ----

thread 'test_reverb_effect' panicked at tests/dsp_audio_tests.rs:85:5:
assertion failed: result.is_ok()

---- test_ring_modulation stdout ----

thread 'test_ring_modulation' panicked at tests/dsp_audio_tests.rs:126:5:
assertion failed: result.is_ok()


failures:
    test_additive_synthesis
    test_chorus_effect
    test_complex_patch
    test_delay_effect
    test_distortion
    test_envelope
    test_fm_synthesis
    test_high_pass_filter
    test_lfo_modulation
    test_low_pass_filter
    test_noise_generators
    test_reverb_effect
    test_ring_modulation

test result: FAILED. 2 passed; 13 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

error: test failed, to rerun pass `--test dsp_audio_tests`
